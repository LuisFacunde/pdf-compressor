import argparse
import sys
from pathlib import Path
from .config import INPUT_DIR, OUTPUT_DIR
from .compressor import compress_pdf, compress_pdf_batch

def validate_directory(path: Path, create_if_missing: bool = False) -> bool:
    """Validate directory exists or can be created."""
    if path.exists():
        if not path.is_dir():
            print(f"Error: {path} exists but is not a directory")
            return False
        return True
    elif create_if_missing:
        try:
            path.mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            print(f"Error creating directory {path}: {e}")
            return False
    else:
        print(f"Error: Directory {path} does not exist")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="Compressor de PDFs de exames m√©dicos da Funda√ß√£o Altino Ventura",
        epilog="""
Exemplos de uso:
  %(prog)s                                    # Comprimir todos os PDFs da pasta padr√£o
  %(prog)s -q screen                         # Compress√£o m√°xima (menor qualidade)  
  %(prog)s -i ./meus_pdfs -o ./comprimidos  # Pastas customizadas
  %(prog)s --single arquivo.pdf saida.pdf   # Comprimir arquivo √∫nico
  %(prog)s -j 8                             # Usar 8 processadores paralelos
  %(prog)s --no-progress                    # Sem barra de progresso
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # Grupos para processamento paralelo de arquivos
    batch_group = parser.add_argument_group('processamento em lote')
    batch_group.add_argument(
        "-i", "--input-dir",
        type=Path, default=INPUT_DIR,
        help=f"pasta dos PDFs originais (padr√£o: {INPUT_DIR})"
    )
    batch_group.add_argument(
        "-o", "--output-dir",
        type=Path, default=OUTPUT_DIR,
        help=f"pasta de sa√≠da para PDFs comprimidos (padr√£o: {OUTPUT_DIR})"
    )
    
    # Grupo para processamento individual de arquivo
    single_group = parser.add_argument_group('arquivo √∫nico')
    single_group.add_argument(
        "--single", nargs=2, metavar=('INPUT', 'OUTPUT'),
        help="comprimir um √∫nico arquivo: --single entrada.pdf saida.pdf"
    )
    
    # Op√ß√µes comuns
    parser.add_argument(
        "-q", "--quality",
        choices=["screen", "ebook", "printer", "prepress", "default"],
        default="prepress",
        help="""n√≠vel de compress√£o:
        screen: m√°xima compress√£o, menor qualidade (ideal para visualiza√ß√£o)
        ebook: compress√£o alta, qualidade m√©dia (recomendado para arquivos m√©dicos)
        printer: compress√£o m√©dia, qualidade alta
        prepress: compress√£o baixa, qualidade m√°xima (padr√£o)
        default: configura√ß√£o padr√£o do Ghostscript"""
    )
    parser.add_argument(
        "--overwrite", action="store_true",
        help="sobrescrever arquivos de sa√≠da existentes"
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="modo verboso (mais detalhes nos logs)"
    )
    parser.add_argument(
        "-j", "--jobs", type=int, metavar="N",
        help="n√∫mero de processadores paralelos (padr√£o: detec√ß√£o autom√°tica)"
    )
    parser.add_argument(
        "--no-progress", action="store_true",
        help="desabilitar barra de progresso"
    )
    
    args = parser.parse_args()
    
    # Configura n√≠vel de logs
    if args.verbose:
        import logging
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Handle single file processing
    if args.single:
        input_file = Path(args.single[0])
        output_file = Path(args.single[1])
        
        print(f"Comprimindo arquivo √∫nico: {input_file.name}")
        success, error = compress_pdf(
            input_file, 
            output_file, 
            quality=args.quality,
            overwrite=args.overwrite
        )
        
        if success:
            print("‚úÖ Compress√£o conclu√≠da com sucesso!")
            return 0
        else:
            print(f"‚ùå Falha na compress√£o: {error}")
            return 1
    
    # Handle batch processing
    else:
        # Valida√ß√£o do diret√≥rio de entrada
        if not validate_directory(args.input_dir, create_if_missing=False):
            return 1
        
        # Valida/Cria diret√≥rio de sa√≠da
        if not validate_directory(args.output_dir, create_if_missing=True):
            return 1
        
        print(f"üìÅ Pasta de entrada: {args.input_dir}")
        print(f"üìÅ Pasta de sa√≠da: {args.output_dir}")
        print(f"üéõÔ∏è  Qualidade: {args.quality}")
        
        # Mostra informa√ß√µes de processamento paralelo
        if args.jobs:
            print(f"‚ö° Processadores: {args.jobs}")
        else:
            import os
            cpu_count = os.cpu_count() or 2
            max_workers = min(4, cpu_count)
            print(f"‚ö° Processadores: {max_workers} (autom√°tico)")
        
        print("-" * 50)
        
        successful, failed = compress_pdf_batch(
            args.input_dir,
            args.output_dir,
            quality=args.quality,
            overwrite=args.overwrite,
            max_workers=args.jobs,
            show_progress=not args.no_progress
        )
        
        print("-" * 50)
        if failed == 0:
            print(f"‚úÖ Todos os {successful} arquivos foram comprimidos com sucesso!")
            return 0
        else:
            print(f"‚ö†Ô∏è  {successful} sucessos, {failed} falhas")
            return 1

if __name__ == "__main__":
    sys.exit(main())